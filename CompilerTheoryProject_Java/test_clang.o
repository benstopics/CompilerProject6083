; ModuleID = 'test_clang.c'
target datalayout = "e-m:w-p:32:32-i64:64-f80:32-n8:16:32-S32"
target triple = "i686-pc-windows-gnu"

@.str = private unnamed_addr constant [63 x i8] c"Runtime error -> Attempted to convert integer '%d' to boolean.\00", align 1
@.str1 = private unnamed_addr constant [25 x i8] c"Check pass by value: %d\0A\00", align 1

; Function Attrs: nounwind
define void @check_int_to_bool(i32 %test) #0 {
entry:
  %test.addr = alloca i32, align 4
  store i32 %test, i32* %test.addr, align 4
  %0 = load i32* %test.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32* %test.addr, align 4
  %cmp1 = icmp ne i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32* %test.addr, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([63 x i8]* @.str, i32 0, i32 0), i32 %2)
  call void @exit(i32 -1) #3
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) #2

; Function Attrs: nounwind
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %inta = alloca i32, align 4
  %intc = alloca [5 x i32], align 4
  store i32 0, i32* %retval
  store i32 6, i32* %inta, align 4
  %arrayidx = getelementptr inbounds [5 x i32]* %intc, i32 0, i32 0
  store i32 2, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [5 x i32]* %intc, i32 0, i32 0
  store i32 2, i32* %arrayidx1, align 4
  %0 = load i32* %inta, align 4
  %1 = load i32* %inta, align 4
  %add = add nsw i32 %0, %1
  %arrayidx2 = getelementptr inbounds [5 x i32]* %intc, i32 0, i32 %add
  %2 = load i32* %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds [5 x i32]* %intc, i32 0, i32 1
  store i32 %2, i32* %arrayidx3, align 4
  %3 = load i32* %inta, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32]* %intc, i32 0, i32 %3
  %4 = load i32* %arrayidx4, align 4
  store i32 %4, i32* %inta, align 4
  %arrayidx5 = getelementptr inbounds [5 x i32]* %intc, i32 0, i32 1
  %5 = load i32* %arrayidx5, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([25 x i8]* @.str1, i32 0, i32 0), i32 %5)
  ret i32 0
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.6.1 (tags/RELEASE_361/final)"}
