package com.benjamindward.compiler.semantic;

import java.io.IOException;
import java.util.ArrayList;

import com.benjamindward.compiler.Compiler;
import com.benjamindward.compiler.CompilerComponent;
import com.benjamindward.compiler.errorhandler.ErrorHandler.SyntaxErrorException;
import com.benjamindward.compiler.errorhandler.ErrorHandler.TypeCheckErrorException;
import com.benjamindward.compiler.lexer.Token;
import com.benjamindward.compiler.lexer.Token.TokenTypes;
import com.benjamindward.compiler.semantic.abstractclasses.Destination;
import com.benjamindward.compiler.semantic.abstractclasses.Expression;
import com.benjamindward.compiler.semantic.abstractclasses.ExpressionNode;
import com.benjamindward.compiler.semantic.abstractclasses.Factor;
import com.benjamindward.compiler.semantic.abstractclasses.Parameter;
import com.benjamindward.compiler.semantic.abstractclasses.VariableDeclaration;

/**
 * Notes: Semantic Analyzer will record string constants and procedure definitions that codegen must put above main.
 * 			Create class called TokenSemanticAST to extend TokenAST which adds these values.
 * 			Only need to enter new scope when entering procedure or program body.
 * @author ben
 *
 */
public class SemanticAnalyzer extends CompilerComponent {
	private SymbolTable rootSymbolTable;
	
	public SymbolTable getRootSymbolTable() {
		return rootSymbolTable;
	}

	public void setRootSymbolTable(SymbolTable rootSymbolTable) {
		this.rootSymbolTable = rootSymbolTable;
	}
	
	public SemanticAnalyzer(Compiler compiler) {
		super(compiler);
		
		setRootSymbolTable(new SymbolTable());
	}
	
	public void enterScope(boolean codeBlock) {
		getRootSymbolTable().enterScope(codeBlock);
		//System.out.println("------------------------Entered scope");
	}
	
	public void exitScope() {
		getRootSymbolTable().exitScope();
		//System.out.println("------------------------Exited scope");
	}
	
	public int getNextMetaID() {
		return getCompiler().getEmitter().getNextMetaID();
	}
	
	public SymbolTableKey lookupAllScopes(String keyName) {
		return getRootSymbolTable().lookupAllScopes(keyName);
	}
	
	public SymbolTableKey lookupMostInnerScope(String keyName) {
		return getRootSymbolTable().lookupMostInnerScope(keyName);
	}
	
	public boolean inOutMostScope() {
		return getRootSymbolTable().getChildSymbolTable() == null; // Returns true if root is innermost scope, false if not
	}
	
	public SymbolTableKey lookupInCurrentCodeBlock(String keyName) {
		return getRootSymbolTable().lookupInCodeBlock(keyName);
	}
	
	/**
	 * Declares procedure in symbol table if not already defined.  Overwrites procedure key id.
	 * @param procedure
	 * @return
	 * @throws SyntaxErrorException
	 * @throws IOException
	 */
	public ProcedureKey declareProcedureKey(ProcedureKey procedure) throws SyntaxErrorException, IOException {
		
		//System.out.println("Procedure Keyname: " + procedure.getKeyName());
		SymbolTableKey lookupKey = lookupInCurrentCodeBlock(procedure.getKeyName());
		if(lookupKey != null) { // Procedure keyname found
			////System.out.println(procedure.getKeyName() + " found");
			////System.out.println("lookupKey name: " + lookupKey.getKeyName());
			if(lookupKey instanceof ProcedureKey) {
				ProcedureKey lookupProcedureKey = (ProcedureKey) lookupKey;
				if(procedure.equalArgumentList(lookupProcedureKey.getParameters())) {
					throw new SyntaxErrorException("Identical procedure header already defined.");
				} else {
					throw new SyntaxErrorException("Definition of procedure with same name but different parameters found. Overloading is currently not supported.");
				}
			}
		}
				
		////System.out.println(procedure.getKeyName() + " not found. Added procedure key.");
		procedure.setMetaKeyId(getNextMetaID());
		getRootSymbolTable().getMostInnerScope().addKey(procedure); // Add procedure header outside the scope it enters in parser
		
		return procedure; // Procedure key was added, send back
	}
	
	/**
	 * Declares variable in symbol table if not already defined.  Overwrites variable key id.
	 * @param variableDeclaration
	 * @return
	 * @throws SyntaxErrorException
	 * @throws IOException
	 */
	public VariableDeclaration declareVariableKey(VariableDeclaration variableDeclaration) throws SyntaxErrorException, IOException {
		VariableKey variable = variableDeclaration.getInfo();
		
		System.out.println("Array size: " + variable.getArraySize());
		
		SymbolTableKey lookupKey = lookupInCurrentCodeBlock(variable.getKeyName());
		if(lookupKey != null) { // Variable keyname found
			////System.out.println(variable.getKeyName() + " found");
			////System.out.println("lookupKey name: " + lookupKey.getKeyName());
			if(lookupKey instanceof VariableKey) {
				VariableKey lookupVarKey = (VariableKey) lookupKey;
				if(variable.equals(lookupVarKey)) {
					throw new SyntaxErrorException("Variable already defined.");
				} else {
					if(!variable.isArray() && lookupVarKey.isArray())
						throw new SyntaxErrorException("Variable name already defined as an array.");
					else if(variable.isArray() && !lookupVarKey.isArray())
						throw new SyntaxErrorException("Variable is already defined as a non-array.");
					else {
						throw new SyntaxErrorException("Variable already defined with different typemark.");
					}
				}
			} // If else, continue on
		}
		
		//System.out.println(variable.getKeyName() + " not found. Added procedure key. Is array? " + variable.isArray());
		variable.setMetaKeyId(getNextMetaID());
		getRootSymbolTable().getMostInnerScope().addKey(variable); // Add procedure header outside the scope it enters in parser
		
		//System.out.println("Variable " + variable + " (metaID: " + variable.getMetaKeyID() + " isParam: " + variable.isParam() + ") added to symbol table.");
		////System.out.println(variable);
		return variableDeclaration; // Added to symbol table, give back
	}
	
	public ProcedureKey lookupProcedureKey(String name) throws SyntaxErrorException, IOException {
		SymbolTableKey lookupKey = lookupAllScopes(name);
		if(lookupKey != null && lookupKey instanceof ProcedureKey) // Variable keyname found and is a procedure key
			return (ProcedureKey) lookupKey;
		else {
			return null;
		}
	}
	
	public VariableKey lookupVariableKey(String name) throws SyntaxErrorException, IOException {
		SymbolTableKey lookupKey = lookupAllScopes(name);
		if(lookupKey != null && lookupKey instanceof VariableKey) // Variable keyname found and is a procedure key
			return (VariableKey) lookupKey;
		else {
			return null;
		}
	}
	
	/**
	 * Checks whether the destination is valid (identifier exists and, if array, has a valid index expression).  Overwrites destination type.
	 * @param destination
	 * @return
	 * @throws SyntaxErrorException
	 * @throws IOException
	 */
	public Destination lookupDestination(Destination destination) throws SyntaxErrorException, IOException {
		VariableKey key = new VariableKey(destination.getVariableName(), destination.isParam(), 0, TokenTypes.NULL, destination.getArrayIndexExpression() == null ? -1 : 0);
		
		SymbolTableKey lookupKey = lookupAllScopes(key.getKeyName());
		if(lookupKey != null) { // Variable keyname found
			////System.out.println(key.getKeyName() + " found");
			////System.out.println("lookupKey name: " + lookupKey.getKeyName());
			if(lookupKey instanceof VariableKey) {
				VariableKey lookupVarKey = (VariableKey) lookupKey;
				key.setTypemark(lookupVarKey.getTypemark()); // Typemark found at least
				if(key.equals(lookupVarKey)) { // Variable definition matched
					destination.setTypemark(lookupVarKey.getTypemark()); // Assign typemark to destination
					//System.out.println("destination typemark now set to " + destination.getTypemark());
					return destination; // Variable checks out
				} else {
					if(!key.isArray() && lookupVarKey.isArray()) // Found variable expected index
						throw new SyntaxErrorException("Expected array index.");
					else if(key.isArray() && !lookupVarKey.isArray())
						throw new SyntaxErrorException("Index cannot be used on a non-array.");
					else {
						throw new SyntaxErrorException("Compiler error: lookupDestination() -> destination isarray: " + key.isArray() + ", key isarray: " + lookupVarKey.isArray());
					}
				}
			} else {
				throw new SyntaxErrorException("Variable.");
			}
		} else {
			throw new SyntaxErrorException("Variable name not defined.");
		}
	}
	
	public ExpressionNode evaluateExpression(ExpressionNode expressionNode) throws Exception {
		Factor factorCast = null;
		Destination destinationCast = null;
		Expression expressionCast = null;
		if(expressionNode instanceof Factor) {
			//System.out.println("evaluteExpression(): cast to factor");
			factorCast = (Factor) expressionNode;
		} else if(expressionNode instanceof Destination) {
			//System.out.println("evaluteExpression(): cast to destination");
			destinationCast = (Destination) expressionNode;
		} else if(expressionNode instanceof Expression) {
			//System.out.println("evaluteExpression(): cast to expression");
			expressionCast = (Expression) expressionNode;
		}
		
		// Bitwise and boolean operators
		if(expressionNode.getOperator() == TokenTypes.AND ||
				expressionNode.getOperator() == TokenTypes.OR) {
			//System.out.println("evaluteExpression(): bitwise operators");
			if(expressionNode.getOperandA().getEvaluatedType() == TokenTypes.BOOL || expressionNode.getOperandB().getEvaluatedType() == TokenTypes.BOOL) { // Conditional
				expressionNode.setEvaluatedType(TokenTypes.BOOL);
				return expressionNode;
			} else if(expressionNode.getOperandA().getEvaluatedType() == TokenTypes.BOOL || expressionNode.getOperandB().getEvaluatedType() == TokenTypes.BOOL) { // Bitwise
				expressionNode.setEvaluatedType(TokenTypes.INTEGER);
				return expressionNode;
			}
				throw new TypeCheckErrorException(expressionNode);
		}
		// Relational operators
		else if(expressionNode.getOperator() == TokenTypes.GT ||
				expressionNode.getOperator() == TokenTypes.LT ||
				expressionNode.getOperator() == TokenTypes.GTEQ ||
				expressionNode.getOperator() == TokenTypes.LTEQ ||
				expressionNode.getOperator() == TokenTypes.EQ ||
				expressionNode.getOperator() == TokenTypes.NEQ) { // >= <= > < == !=
			//System.out.println("evaluteExpression(): boolean operators");
			if((expressionNode.getOperandA().isTypeRelational() && expressionNode.getOperandB().isTypeRelational()) || // Integer or boolean
					(expressionNode.getOperandA().isEvaluatedTypeNumber() && expressionNode.getOperandB().isEvaluatedTypeNumber())) { // Integer or float
				expressionNode.setEvaluatedType(TokenTypes.BOOL);
				return expressionNode; // Compatible types checked out
			} else
				throw new TypeCheckErrorException(expressionNode);
		}
		// Arithmetic operators
		else if(expressionNode.getOperator() == TokenTypes.ADD ||
				expressionNode.getOperator() == TokenTypes.SUB ||
				expressionNode.getOperator() == TokenTypes.MUL ||
				expressionNode.getOperator() == TokenTypes.DIV) { // + - * /
			//System.out.println("evaluteExpression(): arithmetic operators");
			if(expressionNode.getOperandA().isEvaluatedTypeNumber() && expressionNode.getOperandB().isEvaluatedTypeNumber()) { // Integer or float
				if(expressionNode.getOperandA().getEvaluatedType() == TokenTypes.FLOAT || expressionNode.getOperandB().getEvaluatedType() == TokenTypes.FLOAT)
					expressionNode.setEvaluatedType(TokenTypes.FLOAT);
				else
					expressionNode.setEvaluatedType(TokenTypes.INTEGER);
				return expressionNode; // Integers and floats are compatible for arithmetic operators
			} else // Boolean or string involved
				throw new TypeCheckErrorException(expressionNode);
		} else if(expressionCast != null) {
			//System.out.println("evaluteExpression(): evaluate expression");
			if(expressionCast.isNot()) {
				//System.out.println("evaluteExpression(): not (expression)");
				if(expressionCast.getEvaluatedType() == TokenTypes.INTEGER ||
						expressionCast.getEvaluatedType() == TokenTypes.BOOL) { // Not is only supported for integers (bitwise) and booleans (logical/conditional)
					return expressionCast;
				} else {
					//System.out.println("can't use it with NOT");
					throw new TypeCheckErrorException(expressionCast, TokenTypes.NOT);
				}
			} else {
				//System.out.println("evaluteExpression(): (expression)");
				expressionNode.setEvaluatedType(expressionCast.getEvaluatedType());
				return expressionCast; // No typecheck required
			}
		} else if(factorCast != null) {  // It's a factor but not an ID
			//System.out.println("evaluteExpression(): evaluate factor -> " + factorCast);
			return factorCast;
		} else if(destinationCast != null) {
			//System.out.println("evaluteExpression(): evaluate destination -> " + destinationCast);
			return destinationCast;
		} else {
			throw new Exception("Compiler error: evaluateExpression() returned null");
		}
	}
}
